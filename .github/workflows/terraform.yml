name: Terraform (plan on PR, manual apply)

on:
  pull_request:
    paths:
      - 'iac-project/**'

  workflow_dispatch:
    inputs:
      action:
        description: 'Set to "apply" to run terraform apply; leave empty to just run init/validate'
        required: false

jobs:
  plan:
    name: Terraform Plan (PR)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.9'

      - name: Terraform Init
        working-directory: iac-project
        run: terraform init -input=false

      - name: Terraform Format Check
        working-directory: iac-project
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: iac-project
        run: terraform validate

      - name: Terraform Plan
        working-directory: iac-project
        run: terraform plan -out=plan.tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: iac-project/plan.tfplan

  apply:
    name: Terraform Apply (manual)
    if: github.event_name == 'workflow_dispatch'
    # Require environment approval before running apply (create environment 'terraform-apply' in repo settings and add required reviewers)
    environment: terraform-apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.9'

      - name: Terraform Init
        working-directory: iac-project
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: iac-project
        run: terraform validate

      - name: Terraform Apply (auto-approve)
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: iac-project
        env:
          # Put provider credentials in GitHub Secrets (example names):
          # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, GOOGLE_CREDENTIALS, AZURE_CREDENTIALS, etc.
          # Also add any TF_VAR_* values here as needed.
          # Example: TF_VAR_region: ${{ secrets.TF_VAR_region }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # IMPORTANT: ensure remote state is configured in your Terraform files (recommended)
          terraform apply -auto-approve

      - name: No-op when not applying
        if: ${{ github.event.inputs.action != 'apply' }}
        run: echo "workflow_dispatch invoked without 'apply' input; initialization/validate completed. To run apply, re-run workflow with action=apply"
